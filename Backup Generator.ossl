integer __DEBUG__ = TRUE;
//integer __DEBUG__ = FALSE;

//list regions = ["Barrow", "Office"];
string configCard = "config";
list regions;

list weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
list fullWeekDays = ["Thursday","Friday","Saturday","Sunday","Monday","Tuesday","Wednesday"];
list dowInt = [4,5,6,7,1,2,3];
list daysInYear = [ 31, 28, 31, 30,
                 31, 30, 31, 31,
                 30, 31, 30, 31 ];

integer ncline;
key rqid;

string basePath;
string daily_path = "Daily/";
string weekly_path = "Weekly/";
string monthly_path;
string yearly_path = "Yearly/";
integer BackupHour = 14;

integer SECS_DAY = 86400;
integer SECS_WEEK = 604800;

debug( string text ){
    if( __DEBUG__ ){
        llOwnerSay( text );
    }
}

forceDebug( string data ){
    integer dddbg = __DEBUG__;
    __DEBUG__ = TRUE;
    debug(data);
    __DEBUG__ = dddbg;
}

loadConfig(){
    llSetTimerEvent(0.0);
    llOwnerSay("Loading config");
    ncline = -1;
    getNextNCLine("");
}

getNextNCLine( string data ){
    if( data != "" ){
        parseData( data );
    }
    ncline++;
    rqid = llGetNotecardLine( configCard, ncline);
}

parseData( string data ){
    if( llGetSubString( data, 0, 0 ) == "[" ){
        forceDebug(llGetSubString(data,1,-2));
    }
    else if( llGetSubString( data, 0, 0 ) != "#" ){
        list en = llParseString2List( data, ["="], [] );
        string token = llList2String(en,0);
        string value = llList2String(en,1);
        if( token == "Path" ){
            basePath = value;
            string right = llGetSubString( basePath, -1, -1 );
            if( right != "/" ){
                basePath = basePath + "/";
            }
        }
        else if( token == "Region" ){
            regions = regions + [value];
        }
        else if( token == "BackupHour" ){
            BackupHour = (integer) value;
        }
    }
}

integer isOn( string value ){
    return llToUpper(value) == "ON";
}

string getMonth( string t ){
    return pad( llGetSubString( t, 5, 6 ), "00" );
}

string getDoM( string t ){
    return pad( llGetSubString( t, 8, 9 ), "00" );
    //return pad( llGetSubString( "2025-01-05T16:18:41.1235489", 8, 9 ), "00" );
}


// contributed by wrGodLikeBeing
string timestamp2weekday( integer ts ){
    return llList2String( fullWeekDays,(ts/86400)%7 );
}

// returns day of week as an integer, with Sunday as start of week (0), or Monday
string timestamp2WeekdayInteger( integer ts ){
    return llList2String( dowInt, (ts/86400)%7 );
    integer offset = 3;
    if( MondayStart ) offset++;
    ts = ts - (86400*2);

    integer dow = (((ts/86400)%7)+offset)%7;
    return dow;
}

integer isLeapYear( integer year ){
    integer retval = 0;
    if( year % 4 ){ // 2000 is also a leap year, 3000 is not
        retval++;
    }
    return retval;
}

integer getMonthsInDays( integer m, integer year ){
    integer days = 0;
    integer i = 1;
    while( i < m ){
        days += llList2Integer( daysInYear, i-1 );
        if( i == 2 && isLeapYear( year ) ){
            days++;
        }
        i++;
    }
    return days;
}


string pad( string what, string with ){
    what = with+what;
    return llGetSubString( what, -llStringLength(with), -1 );

}

backupList(){
    integer l = llGetListLength( regions );
    integer i = 0;
    while( i < l ){
        backupRegion( llList2String( regions, i ) );
        i++;
    }
    setDailyTimer( TRUE );
}

integer consoleCommand( string command ){
    return osConsoleCommand( command );
}

integer backupRegion( string region ){
    integer time = llGetUnixTime();
    string timestamp = llGetTimestamp();
    string day = timestamp2weekday(time);
    string dow = pad( (string) timestamp2WeekdayInteger( time ), "00" );
    string path;
    string oar;
    string command;

    integer result = osConsoleCommand("change region "+region);
    if( result ){
        llOwnerSay("Backing up region '"+region+"'");
        // first of all, do a normal weekday backup
        path = osReplaceString( basePath, "%r", region, -1, 0 )+daily_path;
        oar = dow+"-"+day;

        // terrain file
        command = "terrain save "+path+"terrain_"+oar+".r32";
        result = consoleCommand( command );

        // xml file
        command = "save xml2 "+path+"xml2_"+oar+".xml";
        result = consoleCommand( command );

        // oar
        command = "save oar "+path+"oar_"+oar+".oar";
        result = consoleCommand( command );

        // is this a monday? (we start the week on a monday, 'cos it makes business sense
        // every saturday = 02, 07 = sunday
        if( dow == "07" ){
            llOwnerSay("...Weekly Backup");
            integer dom = (integer) getDoM( timestamp );
            string pmonth = getMonth( timestamp );
            integer month = (integer) pmonth;
            integer doy = getMonthsInDays( month, (integer) llGetSubString( timestamp, 0, 3 ) );
            doy += dom;
            integer week = (integer) (doy / 7);
            if( doy % 7 ){
                week++;
            }

            //integer week = (time - (time % SECS_DAY)) / SECS_WEEK;
            path = osReplaceString( basePath, "%r", region, -1, 0 )+weekly_path;
            oar = pad( (string)week, "00" )+"-"+pmonth;

            // terrain file
            command = "terrain save "+path+"terrain_"+oar+".r32";
            result = consoleCommand( command );

            // xml file
            command = "save xml2 "+path+"xml2_"+oar+".xml";
            result = consoleCommand( command );

            // oar
            command = "save oar "+path+"oar_"+oar+".oar";
            result = consoleCommand( command );


        }
        if( llGetSubString( llGetTimestamp(), 5, 9 ) == "12-31" ){
            llOwnerSay("...Annual Backup");
            path = osReplaceString( basePath, "%r", region, -1, 0 )+yearly_path;
            oar = llGetSubString( llGetTimestamp(), 0, 18 );
            oar = osReplaceString( oar, "T", "-", -1, 0 );

            // terrain file
            command = "terrain save "+path+"terrain_"+oar+".r32";
            result = consoleCommand( command );

            // xml file
            command = "save xml2 "+path+"xml2_"+oar+".xml";
            result = consoleCommand( command );

            // oar
            command = "save oar "+path+"oar_"+oar+".oar";
            result = consoleCommand( command );
        }
    }
    return result;
}

setDailyTimer( integer setTimer ){
    // calculate 2PM tomorrow
    float difference;
    integer tomorrow = llGetUnixTime() % 86400; // current time today
    if( tomorrow < (BackupHour*3600) ){
        //regular time later today, so do it agin then
        difference = (BackupHour*3600) - tomorrow;
    }
    else {
        integer today = llGetUnixTime() - tomorrow; // start of today
        tomorrow = today + 86400 + (BackupHour*3600); // tomorrow 2pm
        difference = (float) (tomorrow - llGetUnixTime()); // diff between now and 2pm tomorrow
    }

    llOwnerSay( "Timer set to go off in "+diff2Time( (integer) difference ) );
    if( setTimer ){
        llSetTimerEvent( difference );
    }
}

string diff2Time( integer diff ){
    integer h = diff / 3600;
    diff = diff % 3600;
    integer m = diff / 60;
    diff = diff % 60;
    return pad( (string) h, "00" )+":"+pad( (string) m, "00" )+":"+pad( (string) diff, "00" );
}

default {
    state_entry() {
        llSetText("",<0,0,1>,1.0);
        getNextNCLine("");
    }
    changed( integer change ){
        if( change & CHANGED_OWNER ){
            llSetScriptState(llGetScriptName(),FALSE);
            llSleep(0.1);
        }
    }
    dataserver( key id, string data ){
        if( id == rqid ){
            if( data == EOF ){
                backupList();
            }
            else {
                getNextNCLine( data );
            }
        }
    }
    timer(){
        backupList();
    }
}
